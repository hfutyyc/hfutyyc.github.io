<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yyc&#39;s blog</title>
    <link>https://hfutyyc.github.io/</link>
    <description>Recent content on yyc&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 25 Jul 2021 19:49:26 +0800</lastBuildDate><atom:link href="https://hfutyyc.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://hfutyyc.github.io/about/about/</link>
      <pubDate>Sun, 25 Jul 2021 19:49:26 +0800</pubDate>
      
      <guid>https://hfutyyc.github.io/about/about/</guid>
      <description>yyc的个人博客，建设中</description>
    </item>
    
    <item>
      <title>切片扩容问题</title>
      <link>https://hfutyyc.github.io/golang/%E5%88%87%E7%89%87%E6%89%A9%E5%AE%B9%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hfutyyc.github.io/golang/%E5%88%87%E7%89%87%E6%89%A9%E5%AE%B9%E9%97%AE%E9%A2%98/</guid>
      <description>众所周知，golang中切片在容量不足时会自动扩容，那么扩容后的切片容量到底是多少呢？
浏览了很多文章，绝大多数给出的答案都是小于1024时为原来的2倍，大于1024时是1.25倍，因为源码中(1.16.2)这样一段代码
// src/runtime/slice.go:143 	newcap := old.cap doublecap := newcap + newcap if cap &amp;gt; doublecap { newcap = cap } else { if old.cap &amp;lt; 1024 { newcap = doublecap } else { // Check 0 &amp;lt; newcap to detect overflow 	// and prevent an infinite loop. 	for 0 &amp;lt; newcap &amp;amp;&amp;amp; newcap &amp;lt; cap { newcap += newcap / 4 } // Set newcap to the requested cap when 	// the newcap calculation overflowed.</description>
    </item>
    
    <item>
      <title>图片测试</title>
      <link>https://hfutyyc.github.io/golang/test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hfutyyc.github.io/golang/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>数组与切片</title>
      <link>https://hfutyyc.github.io/golang/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hfutyyc.github.io/golang/%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87/</guid>
      <description>数组 数组是具有固定长度且拥有零个或者多个相同数据类型元素的序列。 数组的长度是数组类型的一部分，所以[3]int 和 [4]int 是两种不同的数组类型。
数组需要指定大小，不指定也会根据初始化的自动推算出大小，不可改变 ;
数组是值传递;
数组是内置(build-in)类型,是一组同类型数据的集合，它是值类型，通过从0开始的下标索引访问元素值。在初始化后长度是固定的，无法修改其长度。当作为方法的参数传入时将复制一份数组而不是引用同一指针。数组的长度也是其类型的一部分，通过内置函数len(array)获取其长度。
数组定义：
var array = [5]int{1,2,3,4,5} var array [10]int 切片 切片表示一个拥有相同类型元素的可变长度的序列。 切片是一种轻量级的数据结构，它有三个属性：指针、长度和容量。
切片不需要指定大小;
切片是地址传递;
切片可以通过数组来初始化，也可以通过内置函数make()初始化 .初始化时len=cap,在追加元素时如果容量cap不足时将按len的2倍扩容；
切片定义：
var slice []type = make([]type, len) </description>
    </item>
    
    <item>
      <title>格式化输出</title>
      <link>https://hfutyyc.github.io/golang/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hfutyyc.github.io/golang/%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</guid>
      <description>[一般]
　%v	相应值的默认格式。在打印结构体时，“加号”标记（%+v）会添加字段名
　%#v	相应值的 Go 语法表示
　%T	相应值的类型的 Go 语法表示
　%%	字面上的百分号，并非值的占位符
[布尔]
　%t	单词 true 或 false。
[整数]
　%b	二进制表示
　%c	相应 Unicode 码点所表示的字符
　%d	十进制表示
　%o	八进制表示
　%q	单引号围绕的字符字面值，由 Go 语法安全地转义
　%x	十六进制表示，字母形式为小写 a-f
　%X	十六进制表示，字母形式为大写 A-F
　%U	Unicode 格式：U+1234，等同于 &amp;ldquo;U+%04X&amp;rdquo;
[浮点数及其复合构成]
　%b	无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat 的 &amp;lsquo;b&amp;rsquo; 转换格式一致。例如 -123456p-78
　%e	科学计数法，例如 -1234.456e+78</description>
    </item>
    
  </channel>
</rss>
